<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Funkmap</name>
    </assembly>
    <members>
        <member name="M:Funkmap.Controllers.BandController.GetInviteMusicianInfo(System.String)">
            <summary>
            Information about bands you can  invited musicians.
            (Musician is not a participant of the band and haven't invited yet.)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Funkmap.Controllers.BandController.RemoveMusicianFromBand(Funkmap.Models.Requests.UpdateBandMemberRequest)">
            <summary>
            Remove musician from band
            </summary>
            <returns></returns>
        </member>
        <member name="M:Funkmap.Controllers.BaseController.GetFull(System.String)">
            <summary>
            Full profile information
            </summary>
            <param name="login">Profile login</param>
            <returns></returns>
        </member>
        <member name="M:Funkmap.Controllers.BaseController.Create(Funkmap.Domain.Models.Profile)">
            <summary>
            Create a profile
            </summary>
            <param name="model">Profile</param>
            <returns></returns>
        </member>
        <member name="M:Funkmap.Controllers.BaseController.Update(Funkmap.Domain.Models.Profile)">
            <summary>
            Update a profile
            You can't modify EntityType, Login, UserLogin, AvatarId. For avatar updating use "base/avatar" POST method.
            You can't modify band participants and musician's band. You should use specific API methods.
            </summary>
            <param name="model">Profile model which has only updated properties.</param>
            <returns></returns>
        </member>
        <member name="M:Funkmap.Controllers.BaseController.Delete(System.String)">
            <summary>
            Profile deletion
            </summary>
            <param name="login">Profile login</param>
            <returns></returns>
        </member>
        <member name="M:Funkmap.Controllers.BaseController.Get(System.String)">
            <summary>
            Base profile information (specific for each profile type)
            </summary>
            <param name="login">Логин профиля</param>
            <returns></returns>
        </member>
        <member name="M:Funkmap.Controllers.BaseController.GetImage(System.String)">
            <summary>
            Profile avatar
            (Byte array or base64 string)
            </summary>
            <param name="login">Логин профиля</param>
            <returns></returns>
        </member>
        <member name="M:Funkmap.Controllers.BaseController.UpdateAvatar(Funkmap.Models.Requests.UpdateAvatarRequest)">
            <summary>
            Update profile avatar
            (put null or empty byte array for avatar deleting)
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Funkmap.Controllers.BaseController.GetUserEntitiesLogins">
            <summary>
            Profile's logins which belongs to user
            </summary>
            <returns></returns>
        </member>
        <member name="M:Funkmap.Controllers.BaseController.CheckIfLoginExist(System.String)">
            <summary>
            Check login for existance
            </summary>
            <param name="login">Логин профиля</param>
            <returns></returns>
        </member>
        <member name="M:Funkmap.Controllers.BaseController.GetFullNearest(Funkmap.Models.Requests.FullLocationRequest)">
            <summary>
            Nearest profiles base information
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Funkmap.Controllers.BaseController.GetNearest(Funkmap.Models.Requests.LocationRequest)">
            <summary>
            Nearest profiles navigation information
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Funkmap.Controllers.BaseController.GetFiltered(Funkmap.Models.Requests.FilteredRequest)">
            <summary>
            Profiles base information
            </summary>
            <param name="request">Filtration parameters</param>
            <returns></returns>
        </member>
        <member name="M:Funkmap.Controllers.BaseController.GetFilteredMarkers(Funkmap.Models.Requests.FilteredRequest)">
            <summary>
            Profiles navigation information
            </summary>
            <param name="request">Filtration parameters</param>
            <returns></returns>
        </member>
        <member name="M:Funkmap.Controllers.BaseController.GetSpecific(System.String[])">
            <summary>
            Base information about specific profiles
            </summary>
            <param name="logins">Profile's logins</param>
            <returns></returns>
        </member>
        <member name="M:Funkmap.Controllers.BaseController.GetSpecificMarkers(System.String[])">
            <summary>
            Информация о навигации некоторых профилях
            </summary>
            <param name="logins">Логины профилей</param>
            <returns></returns>
        </member>
        <member name="M:Funkmap.Controllers.BaseController.GetFavorites">
            <summary>
            Marked as favourite profile's base inforamation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Funkmap.Controllers.BaseController.GetFavoritesLogins">
            <summary>
            Marked as favourite profile's logins
            </summary>
            <returns></returns>
        </member>
        <member name="M:Funkmap.Controllers.BaseController.UpdateFavorite(Funkmap.Models.Requests.UpdateFavoriteRequest)">
            <summary>
            Add or delete favourite profile
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Funkmap.Controllers.MusicianController.InviteManyMusician(Funkmap.Models.Requests.UpdateBandMembersRequest)">
            <summary>
            Invite musicians to the band
            </summary>
            <param name="membersRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Funkmap.Controllers.MusicianController.LeaveBand(Funkmap.Models.Requests.UpdateBandMemberRequest)">
            <summary>
            Leave band (if musician is a participant of the band)
            </summary>
            <param name="membersRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Funkmap.Models.BandInviteInfo.AvailableBands">
            <summary>
            Bands in which you can invite musicians
            </summary>
        </member>
        <member name="P:Funkmap.Models.Requests.UpdateAvatarRequest.Login">
            <summary>
            Profile login
            </summary>
        </member>
        <member name="P:Funkmap.Models.Requests.UpdateAvatarRequest.Photo">
            <summary>
            Photo bytes or base64 string (null or empty array for deleting)
            </summary>
        </member>
        <member name="P:Funkmap.Models.Requests.UpdateBandMemberRequest.MusicianLogin">
            <summary>
            Invited musician login
            </summary>
        </member>
        <member name="P:Funkmap.Models.Requests.UpdateBandMemberRequest.BandLogin">
            <summary>
            Inviting band login
            </summary>
        </member>
        <member name="P:Funkmap.Models.Requests.UpdateBandMembersRequest.MusicianLogins">
            <summary>
            Invited musicians logins
            </summary>
        </member>
        <member name="P:Funkmap.Models.Requests.UpdateBandMembersRequest.BandLogin">
            <summary>
             Inviting band login
            </summary>
        </member>
        <member name="P:Funkmap.Models.Requests.UpdateFavoriteRequest.EntityLogin">
            <summary>
            Profile login
            </summary>
        </member>
        <member name="P:Funkmap.Models.Requests.UpdateFavoriteRequest.IsFavorite">
            <summary>
            Favourite flag (need to add ot delete)
            </summary>
        </member>
        <member name="P:Funkmap.Models.Requests.FilteredRequest.Skip">
            <summary>
            Number of skipped elements
            </summary>
        </member>
        <member name="P:Funkmap.Models.Requests.FilteredRequest.Take">
            <summary>
            Number of taken elements (default: 10)
            </summary>
        </member>
        <member name="P:Funkmap.Models.Requests.FilteredRequest.SearchText">
            <summary>
            Search pattern (for names)
            </summary>
        </member>
        <member name="P:Funkmap.Models.Requests.FilteredRequest.UserLogin">
            <summary>
            Profile's creator login
            </summary>
        </member>
        <member name="P:Funkmap.Models.Requests.FilteredRequest.EntityType">
            <summary>
            Profile type
            </summary>
        </member>
        <member name="P:Funkmap.Models.Requests.FilteredRequest.Instruments">
            <summary>
            Interested musician instruments
            </summary>
        </member>
        <member name="P:Funkmap.Models.Requests.FilteredRequest.Expirience">
            <summary>
            Interested musician expiriences
            </summary>
        </member>
        <member name="P:Funkmap.Models.Requests.FilteredRequest.Styles">
            <summary>
            Interested musician styles (genres)
            </summary>
        </member>
        <member name="P:Funkmap.Models.Requests.FilteredRequest.RadiusDeg">
            <summary>
            Search within the radius (radians)
            </summary>
        </member>
        <member name="P:Funkmap.Models.Requests.FilteredRequest.Latitude">
            <summary>
            Latitude
            </summary>
        </member>
        <member name="P:Funkmap.Models.Requests.FilteredRequest.Longitude">
            <summary>
            Longitude
            </summary>
        </member>
        <member name="P:Funkmap.Models.Requests.FilteredRequest.Limit">
            <summary>
            Maximum number of profiles for reading (default: 1000)
            </summary>
        </member>
    </members>
</doc>
